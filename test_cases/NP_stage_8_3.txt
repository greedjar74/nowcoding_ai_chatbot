Test case
<문제설명>에 해당하는 파이썬 코드를 작성한다. 결과는 파이썬 코드 또는 '문제를 풀 수 없습니다.'만 출력
(코드를 생성하기 전 <사전 설정>을 다시 확인하고 문제를 해결한다.)
(배열, 명령어는 따로 정의할 필요 없다.)

- <명령어 설명>, <문제 설명>, <비교연산자 설명>, <제약조건 설명>, <범위설정 설명> 중 하나라도 '이해하지 못했습니다.'를 출력한 경우 문제를 풀 수 없다.

- 패턴 설명이 주어지지 않은 경우 'for문'을 사용할 수 없다. 1이 저장된 모든 위치를 찾고 각각 명령어를 적용하여 파이썬 코드를 작성한다. (제약조건은 무시한다.)

- <패턴 설명>에서 '패턴을 이해하지 못했습니다.' 문구 출력시 'for문'을 사용할 수 없다. 1이 저장된 모든 위치를 찾고 각각 명령어를 적용하여 파이썬 코드를 작성한다. (제약조건은 무시한다.)

- <패턴 설명>이 주어진 경우 문제의 배열에 패턴이 존재하는지 확인한다. 
  패턴이 존재하는 경우 제약조건을 만족하는 코드를 작성한다. (조건문을 활용하여 코드를 작성한다.)
  패턴이 존재하지 않는 경우 'for문'을 사용할 수 없다. 1이 저장된 모든 위치를 찾고 각각 명령어를 적용하여 파이썬 코드를 작성한다. (제약조건은 무시한다.)

# NP09PY019
제약조건: 반복문 2개, 커맨드 1개 

[[1, 0, 0, 0, 0, 1, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
[0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
[0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
[0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
[1, 0, 0, 0, 0, 1, 0, 0, 0, 0], 
[0, 0, 0, 0, 1, 0, 0, 0, 0, 1], 
[0, 0, 0, 1, 0, 0, 0, 0, 1, 0], 
[0, 0, 1, 0, 0, 0, 0, 1, 0, 0], 
[0, 1, 0, 0, 0, 0, 1, 0, 0, 0]]